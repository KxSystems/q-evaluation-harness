{"task_id": 0, "prompt": "// @overview\n// Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold\n//\n// @param x {float[]} List of floating point numbers.\n// @param y {float}   Threshold parameter\n//\n// @return {boolean}  1b if two numbers are closer that threshold or 0b otherwise\nhas_close_elements:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False", "q_tests": [], "entry_point": "has_close_elements", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 1, "prompt": "// @overview\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n//    separate those group into separate strings and return the list of those.\n//    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n//    Ignore any spaces in the input string.\n//\n// @param x {string}  List of integers.\n//\n// @return {string[]}    List of length two\nseparate_paren_groups:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']", "q_tests": [], "entry_point": "separate_paren_groups", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 2, "prompt": "// @overview\n// You're given a list of deposit and withdrawal operations on a bank account that starts with\n//    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n//    at that point function should return True. Otherwise it should return False\n//\n//\n// @param x {float}   Floating point number.\n//\n// @return {float}    Decimal part of the number.\ntruncate_number:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6", "q_tests": [], "entry_point": "truncate_number", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 3, "prompt": "// @overview\n// You're given a list of deposit and withdrawal operations on a bank account that starts with\n//    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n//    at that point function should return True. Otherwise it should return False\n//\n//\n// @param x {int[]}   List of transactions.\n//\n// @return {boolean}    True if goes bust.\nbelow_zero:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True", "q_tests": [], "entry_point": "below_zero", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 4, "prompt": "// @overview\n// For a given list of input numbers, calculate Mean Absolute Deviation\n//    around the mean of this dataset.\n//\n// @param x {float[]}   List of numbers.\n//\n// @return {float}    Mean absolute deviation.\nmean_absolute_deviation:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6", "q_tests": [], "entry_point": "mean_absolute_deviation", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 5, "prompt": "// @overview\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n//\n// @param x {int[]}   List of numbers.\n// @param y {int}     Delimeter.\n//\n// @return {int[]}    New list with delimiters\nintersperse:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]", "q_tests": [], "entry_point": "intersperse", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 6, "prompt": "// @overview\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n//    For each of the group, output the deepest level of nesting of parentheses.\n//    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n//\n// @param x {string}  Symbol with parentheses.\n//\n// @return {int[]}    Nesting for each element\nparse_nested_parens:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]", "q_tests": [], "entry_point": "parse_nested_parens", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 7, "prompt": "// @overview\n// Filter an input list of strings only for ones that contain given substring\n//\n// @param x {symbol[]}  List of symbols.\n// @param y {symbol}    Substring Symbol.\n//\n// @return {symbol[]}    filtered list\nfilter_by_substring:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "q_tests": [], "entry_point": "filter_by_substring", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 8, "prompt": "// @overview\n// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1\n//\n// @param x {int[]}  List of integers.\n//\n// @return {int[]}    List of length two\nsum_product:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)", "q_tests": [], "entry_point": "sum_product", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 9, "prompt": "// @overview\n// From a given list of integers, generate a list of rolling maximum element found until given moment\n//    in the sequence.\n//\n// @param x {int[]}  List of integers.\n//\n// @return {int[]}   List of rolling max integers\nrolling_max:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]", "q_tests": [], "entry_point": "rolling_max", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 10, "prompt": "// @overview\n// Find the shortest palindrome that begins with a supplied string.\n//    Algorithm idea is simple:\n//    - Find the longest postfix of supplied string that is a palindrome.\n//    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n//\n// @param x {string}  Input string.\n//\n// @return {string}   Output palindrome string\nmake_palindrome:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'", "q_tests": [], "entry_point": "make_palindrome", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 11, "prompt": "// @overview\n// Input are two strings a and b consisting only of 1s and 0s.\n//    Perform binary XOR on these inputs and return result also as a string.\n//\n// @param x {string}  First input string.\n// @param y {string}  Second input string.\n//\n// @return {string}   Output xor string\nstring_xor:{[x,y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'", "q_tests": [], "entry_point": "string_xor", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 12, "prompt": "// @overview\n// Out of list of strings, return the longest one. Return the first one in case of multiple\n//    strings of the same length. Return empty in case the input list is empty.\n//\n// @param x {string[]}  List of input strings.\n//\n// @return {string|null}   Output string or null\nlongest:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'", "q_tests": [], "entry_point": "longest", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 13, "prompt": "// @overview\n// Return a greatest common divisor of two integers a and b\n//\n// @param x {int}  First integer.\n// @param y {int}  Second integer.\n//\n// @return {int}   The gcd\ngreatest_common_divisor:{[x,y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12", "q_tests": [], "entry_point": "greatest_common_divisor", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 14, "prompt": "// @overview\n// Return list of all prefixes from shortest to longest of the input string\n//\n// @param x {string}  Input string.\n//\n// @return {string[]} List of prefixes\nall_prefixes:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']", "q_tests": [], "entry_point": "all_prefixes", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 15, "prompt": "// @overview\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n//\n// @param x {int}  Input integer.\n//\n// @return {string} String of numbers.\nstring_sequence:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'", "q_tests": [], "entry_point": "string_sequence", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 16, "prompt": "// @overview\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n//\n// @param x {string}  Input string.\n//\n// @return {int} Number of characters.\ncount_distinct_characters:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5", "q_tests": [], "entry_point": "count_distinct_characters", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 17, "prompt": "// @overview\n// Input to this function is a string representing musical notes in a special ASCII format.\n//    Your task is to parse this string and return list of integers corresponding to how many beats does each\n//    note last.\n//\n//    Here is a legend:\n//    'o' - whole note, lasts four beats\n//    'o|' - half note, lasts two beats\n//    '.|' - quater note, lasts one beat\n//\n// @param x {string}  Input string.\n//\n// @return {int[]} Beats of each note.\nparse_music:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]", "q_tests": [], "entry_point": "parse_music", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 18, "prompt": "// @overview\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n//\n// @param x {string}  Input string.\n// @param y {string}  The substring.\n//\n// @return {int} Number of occurances.\nhow_many_times:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1", "q_tests": [], "entry_point": "how_many_times", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 19, "prompt": "// @overview\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n//    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n//    Return the string with numbers sorted from smallest to largest\n//\n// @param x {string}  Input string of numbers.\n//\n// @return {int} Sorted list of numbers.\nsort_numbers:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'", "q_tests": [], "entry_point": "sort_numbers", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 20, "prompt": "// @overview\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n//    other and return them in order (smaller number, larger number).\n//\n// @param x {int[]}  Input list of numbers.\n//\n// @return {int[2]} Two closes numbers in order.\nfind_closest_elements:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)", "q_tests": [], "entry_point": "find_closest_elements", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 21, "prompt": "// @overview\n// Given list of numbers (of at least two elements), apply a linear transform to that list,\n//    such that the smallest number will become 0 and the largest will become 1\n//\n// @param x {float[]}  Input list of numbers.\n//\n// @return {float[]} Transformed list.\nrescale_to_unit:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]", "q_tests": [], "entry_point": "rescale_to_unit", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 22, "prompt": "// @overview\n// Filter given mixed list of any values for only for integers\n//\n// @param x {any[]}  Input list of mixed type.\n//\n// @return {int[]} Filtered list.\nfilter_integers:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]", "q_tests": [], "entry_point": "filter_integers", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 23, "prompt": "// @overview\n// Return length of given string\n//\n// @param x {string}  Input string.\n//\n// @return {int} length.\nstrlen:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9", "q_tests": [], "entry_point": "strlen", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 24, "prompt": "// @overview\n// For a given number n, find the largest number that divides n evenly, smaller than n\n//\n// @param x {int}  Input number.\n//\n// @return {int} largest proper divisor.\nlargest_divisor:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7", "q_tests": [], "entry_point": "largest_divisor", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 25, "prompt": "// @overview\n// Return list of prime factors of given integer in the order from smallest to largest.\n//    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n//    Input number should be equal to the product of all factors\n//\n// @param x {int}  Input number.\n//\n// @return {int[]} list of prime factors.\nfactorize:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]", "q_tests": [], "entry_point": "factorize", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 26, "prompt": "// @overview\n// From a list of integers, remove all elements that occur more than once.\n//    Keep order of elements left the same as in the input.\n//\n// @param x {int[]}  Input number list.\n//\n// @return {int[]} list distinct elements.\nremove_duplicates:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]", "q_tests": [], "entry_point": "remove_duplicates", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 27, "prompt": "// @overview\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n//\n// @param x {string} Input String.\n//\n// @return {string} Transformed String.\nflip_case:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "q_tests": [], "entry_point": "flip_case", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 28, "prompt": "// @overview\n// Concatenate list of strings into a single string\n//\n// @param x {string[]} Input String List.\n//\n// @return {string} Single concatenated string.\nconcatenate:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'", "q_tests": [], "entry_point": "concatenate", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 29, "prompt": "// @overview\n// Filter an input list of strings only for ones that start with a given prefix.\n//\n// @param x {string[]} Input String List.\n// @param y {string[]} String Prefix.\n//\n// @return {string[]} Strings with prefix.\nfilter_by_prefix:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "q_tests": [], "entry_point": "filter_by_prefix", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 30, "prompt": "// @overview\n// Return only positive numbers in the list.\n//\n// @param x {int[]} Input number List.\n//\n// @return {int[]} List of positive numbers.\nget_positive:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []", "q_tests": [], "entry_point": "get_positive", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 31, "prompt": "// @overview\n// Return true if a given number is prime, and false otherwise.\n//\n// @param x {int} Input number.\n//\n// @return {boolean} 1b if a given number is prime, and 0b otherwise\nis_prime:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False", "q_tests": [], "entry_point": "is_prime", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 32, "prompt": "// @overview\n// xs are coefficients of a polynomial.\n//    find_zero find x such that poly(x) = 0.\n//    find_zero returns only only zero point, even if there are many.\n//    Moreover, find_zero only takes list xs having even number of coefficients\n//    and largest non zero coefficient as it guarantees\n//    a solution.\n//\n// @param x {float[]} List of polynomial coefficents.\n//\n// @return {float} zero of polynomial\nfind_zero:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4", "q_tests": [], "entry_point": "find_zero", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 33, "prompt": "// @overview\n// This function takes a list l and returns a list l' such that\n//    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n//    to the values of the corresponding indicies of l, but sorted.\n//\n// @param x {float[]} Input list.\n//\n// @return {float} thrid sorted list\nsort_third:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])", "q_tests": [], "entry_point": "sort_third", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 34, "prompt": "// @overview\n// Return sorted unique elements in a list\n//\n// @param x {float[]} Input list.\n//\n// @return {float[]} unique sorted list\nunique:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]", "q_tests": [], "entry_point": "unique", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 35, "prompt": "// @overview\n// Return maximum element in the list.\n//\n// @param x {float[]} Input list.\n//\n// @return {float} max value\nmax_element:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124", "q_tests": [], "entry_point": "max_element", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 36, "prompt": "// @overview\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n//\n// @param x {int} Value bellow which we check.\n//\n// @return {int} number of times 7 apears\nfizz_buzz:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026", "q_tests": [], "entry_point": "fizz_buzz", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 37, "prompt": "// @overview\n// This function takes a list l and returns a list l' such that\n//    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n//    to the values of the even indicies of l, but sorted.\n//\n// @param x {int[]} Input List.\n//\n// @return {int[]} Even sorted list\nsort_even:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])", "q_tests": [], "entry_point": "sort_even", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 38, "prompt": "// @overview\n// def encode_cyclic(s: str):\n//    # split string to groups. Each of length 3.\n//    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n//    # cycle elements in each group. Unless group has fewer elements than 3.\n//    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n//   return \"\".join(groups)\n\n//    takes as input string encoded with encode_cyclic function. Returns decoded string.\n//\n// @param x {string} Encoded String.\n//\n// @return {string} Decoded String.\ndecode_cyclic:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str", "q_tests": [], "entry_point": "decode_cyclic", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 39, "prompt": "// @overview\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n//\n// @param x {int} index.\n//\n// @return {int} n-th prime fibonacci number.\nprime_fib:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437", "q_tests": [], "entry_point": "prime_fib", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 40, "prompt": "// @overview\n// takes a list of integers as an input.\n//    it returns True if there are three distinct elements in the list that\n//    sum to zero, and False otherwise.\n//\n// @param x {int[]} Integer list.\n//\n// @return {boolean} True or False if three element sum to zero.\ntriples_sum_to_zero:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False", "q_tests": [], "entry_point": "triples_sum_to_zero", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 41, "prompt": "// @overview\n// Imagine a road that's a perfectly straight infinitely long line.\n//    n cars are driving left to right;  simultaneously, a different set of n cars\n//    are driving right to left.   The two sets of cars start out being very far from\n//    each other.  All cars move in the same speed.  Two cars are said to collide\n//    when a car that's moving left to right hits a car that's moving right to left.\n//    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n//    in their trajectory as if they did not collide.\n\n//    This function outputs the number of such collisions.\n//\n// @param x {int} Number of cars moving left to right.\n//\n// @return {int} Number of collisions.\ncar_race_collision:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100", "q_tests": [], "entry_point": "car_race_collision", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 42, "prompt": "// @overview\n// Return list with elements incremented by 1.\n//\n// @param x {int[]} List of integers.\n//\n// @return {int[]} Incremented list.\nincr_list:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]", "q_tests": [], "entry_point": "incr_list", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 43, "prompt": "// @overview\n// takes a list of integers as an input.\n//    it returns True if there are two distinct elements in the list that\n//    sum to zero, and False otherwise.\n//\n// @param x {int[]} List of integers.\n//\n// @return {boolean} Do two integers sum to zero.\npairs_sum_to_zero:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False", "q_tests": [], "entry_point": "pairs_sum_to_zero", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 44, "prompt": "// @overview\n// Change numerical base of input number x to base.\n//    return string representation after the conversion.\n//    base numbers are less than 10.\n//\n// @param x {int} Input integer.\n// @param y {int} Base of numbers.\n//\n// @return {string} Representation in new base.\nchange_base:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)", "q_tests": [], "entry_point": "change_base", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 45, "prompt": "// @overview\n// Given length of a side and high return area for a triangle.\n//\n// @param x {float} side length.\n// @param y {float} hight length.\n//\n// @return {float} area.\ntriangle_area:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0", "q_tests": [], "entry_point": "triangle_area", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 46, "prompt": "// @overview\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//    fib4(0) -> 0\n//    fib4(1) -> 0\n//    fib4(2) -> 2\n//    fib4(3) -> 0\n//    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n//    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n//\n// @param x {int} index in sequenece.\n//\n// @return {int} the fib4 number.\nfib4:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386", "q_tests": [], "entry_point": "fib4", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 47, "prompt": "// @overview\n// Return median of elements in the list l.\n//\n// @param x {int[]} list of integers.\n//\n// @return {float} the median.\nmedian:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7", "q_tests": [], "entry_point": "median", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 48, "prompt": "// @overview\n// Checks if given string is a palindrome\n//\n// @param x {string} input string.\n//\n// @return {boolean} 1b if palindrome 0b otherwise.\nis_palindrome:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False", "q_tests": [], "entry_point": "is_palindrome", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 49, "prompt": "// @overview\n// Return 2^n modulo p (be aware of numerics).\n//\n// @param x {int} exponent.\n// @param y {int} prime.\n//\n// @return {int} return value of 2^n mod p.\nmodp:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3", "q_tests": [], "entry_point": "modp", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 50, "prompt": "// @overview\n// def encode_shift(s: str):\n//    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n//\n//  takes as input string encoded with encode_shift function. Returns decoded string.\n//\n// @param x {string} Encoded String. \n//\n// @return {string} Decoded Atring.\ndecode_shift:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str", "q_tests": [], "entry_point": "decode_shift", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 51, "prompt": "// @overview\n// remove_vowels is a function that takes string and returns string without vowels.\n//\n// @param x {string} String with vowels upper and lower. \n//\n// @return {string} String with no vowels.\nremove_vowels:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'", "q_tests": [], "entry_point": "remove_vowels", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 52, "prompt": "// @overview\n// Return True if all numbers in the list l are below threshold t.\n//\n// @param x {int[]} List of integers \n// @param y {int} threshold \n//\n// @return {boolean} All less than threshord.\nbelow_threshold:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)", "q_tests": [], "entry_point": "below_threshold", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 53, "prompt": "// @overview\n// Add two numbers x and y\n//\n// @param x {int} first number \n// @param y {int} second number\n//\n// @return {int} sum of both.\nadd:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y", "q_tests": [], "entry_point": "add", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 54, "prompt": "// @overview\n// Check if two words have the same distinct characters.\n//\n// @param x {int} first word \n// @param y {int} second word\n//\n// @return {boolean} 1b if same chars 0b otherwise\nsame_chars:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False", "q_tests": [], "entry_point": "same_chars", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 55, "prompt": "// @overview\n// Return n-th Fibonacci number.\n//\n// @param x {int} sequeunce id \n//\n// @return {int} Fib number\nfib:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144", "q_tests": [], "entry_point": "fib", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 56, "prompt": "// @overview\n// brackets is a string of \"<\" and \">\".\n//    return True if every opening bracket has a corresponding closing bracket.\n//\n// @param x {string} string of brackets\n//\n// @return {boolean} do we have closing brackets\ncorrect_bracketing:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")", "q_tests": [], "entry_point": "correct_bracketing", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 57, "prompt": "// @overview\n// Return True is list elements are monotonically increasing or decreasing.\n//\n// @param x {int[]} Input list of integer\n//\n// @return {boolean} 1b if monotonic 0b otherwise\nmonotonic:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True", "q_tests": [], "entry_point": "monotonic", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 58, "prompt": "// @overview\n// Return sorted unique common elements for two lists.\n//\n// @param x {int[]} 1st Input list of integers\n// @param y {int[]} 2nd Input list of integers\n//\n// @return {int[]} list of sorted common integers\ncommon:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []", "q_tests": [], "entry_point": "common", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 59, "prompt": "// @overview\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n//\n// @param x {int} Input integer\n//\n// @return {int} Prime Factor\nlargest_prime_factor:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29", "q_tests": [], "entry_point": "largest_prime_factor", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 60, "prompt": "// @overview\n// sum_to_n is a function that sums numbers from 1 to n inclusive\n//\n// @param x {int} Input integer\n//\n// @return {int} the sum value\nsum_to_n:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050", "q_tests": [], "entry_point": "sum_to_n", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 61, "prompt": "// @overview\n// brackets is a string of \"(\" and \")\".\n//    return True if every opening bracket has a corresponding closing bracket.\n//\n// @param x {string} Input string\n//\n// @return {boolean} 1b if brackets are closed zero otherwise\ncorrect_bracketing:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")", "q_tests": [], "entry_point": "correct_bracketing", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 62, "prompt": "// @overview\n// xs represent coefficients of a polynomial.\n//\n// @param x {float[]} coefficents\n//\n// @return {float[]} differentiated polynomial coefficents\nderivative:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []", "q_tests": [], "entry_point": "derivative", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 63, "prompt": "// @overview\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//    fibfib(0) == 0\n//    fibfib(1) == 0\n//    fibfib(2) == 1\n//    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n//    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n//\n// @param x {int} sequence id\n//\n// @return {int} sequence value\nfibfib:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927", "q_tests": [], "entry_point": "fibfib", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 64, "prompt": "// @overview\n// Write a function vowels_count which takes a string representing\n//    a word as input and returns the number of vowels in the string.\n//    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n//    vowel, but only when it is at the end of the given word.\n//    This is case insensitive too.\n//\n// @param x {string} input string\n//\n// @return {int} vowel count\nvowels_count:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "vowels_count", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 65, "prompt": "// @overview\n// Circular shift the digits of the integer x, shift the digits right by shift\n//    and return the result as a string.\n//    If shift > number of digits, return digits reversed.\n//\n// @param x {int} input number\n// @param y {int} input shift\n//\n// @return {string} shifted number as a string\ncircular_shift:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "circular_shift", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 66, "prompt": "// @overview\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n//    ASCII codes.\n//\n// @param x {string} input string\n//\n// @return {int} sum number\ndigitSum:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"", "q_tests": [], "entry_point": "digitSum", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 67, "prompt": "// @overview\n//  In this task, you will be given a string that represents a number of apples and oranges \n//    that are distributed in a basket of fruit this basket contains \n//    apples, oranges, and mango fruits. Given the string that represents the total number of \n//    the oranges and apples and an integer that represent the total number of the fruits \n//    in the basket return the number of the mango fruits in the basket.\n//    for examble:\n//    for (\"5 apples and 6 oranges\", 19) return 19 - 5 - 6 = 8\n//    for (\"0 apples and 1 oranges\",3) return 3 - 0 - 1 = 2\n//    for (\"2 apples and 3 oranges\", 100) return 100 - 2 - 3 = 95\n//    for (\"100 apples and 1 oranges\",120) return 120 - 100 - 1 = 19\n//\n// @param x {string} apples and oranges\n// @param y {int} total number of fruits\n//\n// @return {int} number of mango fruits\nfruit_distribution:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19", "q_tests": [], "entry_point": "fruit_distribution", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 68, "prompt": "// @overview\n//  Given an array representing a branch of a tree that has non-negative integer nodes\n//    your task is to pluck one of the nodes and return it.\n//    The plucked node should be the node with the smallest even value.\n//    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n//\n//    The plucked node should be returned in a list, [ smalest_value, its index ],\n//    If there are no even values or the given array is empty, return [].\n//\n// @param x {int[]} branch of tree\n//\n// @return {int[]} plucked node\npluck:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"", "q_tests": [], "entry_point": "pluck", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 69, "prompt": "// @overview\n//  You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n//    zero, and has a frequency greater than or equal to the value of the integer itself. \n//    The frequency of an integer is the number of times it appears in the list.\n//    If no such a value exist, return -1.\n//\n// @param x {int[]} input list of integers\n//\n// @return {int} return integer\nsearch:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1", "q_tests": [], "entry_point": "search", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 70, "prompt": "// @overview\n//  Given list of integers, return list in strange order.\n//    Strange sorting, is when you start with the minimum value,\n//    then maximum of the remaining integers, then minimum and so on.\n//\n// @param x {int[]} input list of integers\n//\n// @return {int[]} strange sorted list\nstrange_sort_list:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "strange_sort_list", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 71, "prompt": "// @overview\n//Given the lengths of the three sides of a triangle. Return the area of\n//    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n//    Otherwise return -1\n//    Three sides make a valid triangle when the sum of any two sides is greater \n//    than the third side.\n//\n// @param x {int} side 1 length\n// @param y {int} side 2 length\n// @param z {int} side 3 length\n//\n// @return {int} area of triangle\ntriangle_area:{[x;y;z]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1", "q_tests": [], "entry_point": "triangle_area", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 72, "prompt": "// @overview\n// Write a function that returns True if the object q will fly, and False otherwise.\n//    The object q will fly if it's balanced (it is a palindromic list) and the sum of \n//    its elements is less than or equal the maximum possible weight w.\n//\n// @param x {int[]} list of integers\n// @param y {int} max possible weight\n//\n// @return {boolean} true if will fly\nwill_it_fly:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True", "q_tests": [], "entry_point": "will_it_fly", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 73, "prompt": "// @overview\n// Given an array arr of integers, find the minimum number of elements that\n//    need to be changed to make the array palindromic. A palindromic array is an array that\n//    is read the same backwards and forwards. In one change, you can change one element to any other element.\n//\n// @param x {int[]} list of integers\n//\n// @return {int} number to change\nsmallest_change:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1", "q_tests": [], "entry_point": "smallest_change", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 74, "prompt": "// @overview\n// Write a function that accepts two lists of strings and returns the list that has \n//    total number of chars in the all strings of the list less than the other list.\n//\n//    if the two lists have the same number of chars, return the first list.\n//\n//    Examples\n//    for ([], []) return []\n//    for (['hi', 'admin'], ['hI', 'Hi']) return ['hI', 'Hi']\n//    for (['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) return ['hi', 'admin']\n//    for (['hi', 'admin'], ['hI', 'hi', 'hi']) return ['hI', 'hi', 'hi']\n//    for (['4'], ['1', '2', '3', '4', '5']) return ['4']\n//\n// @param x {string[]} list of strings\n// @param y {string[]} list of strings\n//\n// @return {string[]} number to change\ntotal_match:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []", "q_tests": [], "entry_point": "total_match", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 75, "prompt": "// @overview\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n//    and false otherwise.\n//\n//\n// @param x {int} input integer\n//\n// @return {boolean} number to change\nis_multiply_prime:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True", "q_tests": [], "entry_point": "is_multiply_prime", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 76, "prompt": "// @overview\n// Your task is to write a function that returns true if a number x is a simple\n//    power of n and false in other cases.\n//    x is a simple power of n if n**int=x\n//    For example:\n//    for (1, 4) return true\n//    for (2, 2) return true\n//    for (8, 2) return true\n//    for (3, 2) return false\n//    for (3, 1) return false\n//    for (5, 3) return false\n//\n//\n// @param x {int} input integer\n// @param y {int} base integer\n//\n// @return {boolean} is power?\nis_simple_power:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "is_simple_power", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 77, "prompt": "// @overview\n// Write a function that takes an integer a and returns True \n//    if this ingeger is a cube of some integer number.\n//    Note: you may assume the input is always valid.\n//    Examples:\n//    for 1 return True\n//    for 2 return False\n//    for -1 return True\n//    for 64 return True\n//    for 0 return True\n//    for 180 return False\n//\n//\n// @param x {int} input integer\n//\n// @return {boolean} is cube?\niscube:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))", "q_tests": [], "entry_point": "iscube", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 78, "prompt": "// @overview \n// You have been tasked to write a function that receive  \n//    a hexadecimal number as a string and counts the number of hexadecimal \n//    digits that are primes (prime number, or a prime, is a natural number \n//    greater than 1 that is not a product of two smaller natural numbers).\n//    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n//    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n//    So you have to determine a number of the following digits: 2, 3, 5, 7, \n//    B (=decimal 11), D (=decimal 13).\n//    Note: you may assume the input is always correct or empty string, \n//    and symbols A,B,C,D,E,F are always uppercase.\n//    Examples:\n//    For num = \"AB\" the output should be 1.\n//    For num = \"1077E\" the output should be 2.\n//    For num = \"ABED1A33\" the output should be 4.\n//    For num = \"123456789ABCDEF0\" the output should be 6.\n//    For num = \"2020\" the output should be 2.\n//\n//\n// @param x {string} input string\n//\n// @return {int} \nhex_key:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0", "q_tests": [], "entry_point": "hex_key", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 79, "prompt": "// @overview \n// You will be given a number in decimal form and your task is to convert it to\n//    binary format. The function should return a string, with each character representing a binary\n//    number. Each character in the string will be '0' or '1'.\n//\n//    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n//    The extra characters are there to help with the format.\n//\n//    Examples:\n//    for 15 returns \"db1111db\"\n//    for 32 returns \"db100000db\"\n//\n//\n// @param x {int} input integer\n//\n// @return {string} binary representation\ndecimal_to_binary:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "decimal_to_binary", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 80, "prompt": "// @overview \n// You are given a string s.\n//    Your task is to check if the string is happy or not.\n//    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n//    For example:\n//    for \"a\" return False\n//    for \"aa\" return False\n//    for \"abcd\" return True\n//    for \"aabb\" return False\n//    for \"adb\" return True\n//    for \"xyy\" return False\n//\n//\n// @param x {string} input string\n//\n// @return {boolean} 1b if happy otherwise 0b\nis_happy:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"", "q_tests": [], "entry_point": "is_happy", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 81, "prompt": "// @overview \n// It is the last week of the semester and the teacher has to give the grades\n//    to students. The teacher has been making her own algorithm for grading.\n//    The only problem is, she has lost the code she used for grading.\n//    She has given you a list of GPAs for some students and you have to write \n//    a function that can output a list of letter grades using the following table:\n//             GPA       |    Letter grade\n//              4.0                A+\n//            > 3.7                A \n//            > 3.3                A- \n//            > 3.0                B+\n//            > 2.7                B \n//            > 2.3                B-\n//            > 2.0                C+\n//            > 1.7                C\n//            > 1.3                C-\n//            > 1.0                D+ \n//            > 0.7                D \n//            > 0.0                D-\n//              0.0                E\n//    \n//\n//    Example:\n//    for [4.0, 3, 1.7, 2, 3.5] return ['A+', 'B', 'C-', 'C', 'A-']\n//\n//\n// @param x {float[]} input list of scores as floats\n//\n// @return {sting[]} list of grades\nnumerical_letter_grade:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "numerical_letter_grade", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 82, "prompt": "// @overview \n// Write a function that takes a string and returns True if the string\n//    length is a prime number or False otherwise\n//\n// @param x {string} input string\n//\n// @return {boolean} 1b if string length is prime 0b otherwise\nprime_length:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False", "q_tests": [], "entry_point": "prime_length", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 83, "prompt": "// @overview \n// Given a positive integer n, return the count of the numbers of n-digit\n//    positive integers that start or end with 1\n//\n// @param x {int} number of digits\n//\n// @return {int} count of numbers\nstarts_one_ends:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "starts_one_ends", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 84, "prompt": "// @overview \n// Given a positive integer N, return the total sum of its digits in binary.\n//    \n//    Example\n//        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n//        For N = 150, the sum of digits will be 6 the output should be \"110\".\n//        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n//\n// @param x {int} input integer\n//\n// @return {string} binary count\nsolve:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"", "q_tests": [], "entry_point": "solve", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 85, "prompt": "// @overview \n// Given a non-empty list of integers lst. add the even elements that are at odd indices\n//\n// @param x {int[]} input integer list\n//\n// @return {int} the sum\nadd:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.", "q_tests": [], "entry_point": "add", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 86, "prompt": "// @overview \n// Write a function that takes a string and returns an ordered version of it.\n//    Ordered version of string, is a string where all words (separated by space)\n//    are replaced by a new word where all the characters arranged in\n//    ascending order based on ascii value.\n//    Note: You should keep the order of words and blank spaces in the sentence.\n//\n// @param x {string} input string\n//\n// @return {string} ordered string\nanti_shuffle:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "anti_shuffle", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 87, "prompt": "// @overview \n// You are given a 2 dimensional data, as a nested lists,\n//    which is similar to matrix, however, unlike matrices,\n//    each row may contain a different number of columns.\n//    Given lst, and integer x, find integers x in the list,\n//    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n//    each tuple is a coordinate - (row, columns), starting with 0.\n//    Sort coordinates initially by rows in ascending order.\n//    Also, sort coordinates of the row by columns in descending order.\n//\n// Examples:\n//    for ([\n//      [1,2,3,4,5,6],\n//      [1,2,3,4,1,6],\n//      [1,2,3,4,5,1]\n//    ], 1) return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n//    for ([], 1) return []\n//    for ([[], [1], [1, 2, 3]], 3) return [(2, 2)]\n//\n// @param x {list} list of integer lists\n// @param y {int} integer to find\n//\n// @return {list} list of indexes\nget_row:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "get_row", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 88, "prompt": "// @overview \n// Given an array of non-negative integers, return a copy of the given array after sorting,\n//    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n//    or sort it in descending order if the sum( first index value, last index value) is even.\n//\n// @param x {int[]} list of integer lists\n//\n// @return {int[]} list of indexes sorted as above\nsort_array:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"", "q_tests": [], "entry_point": "sort_array", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 89, "prompt": "// @overview \n// Create a function encrypt that takes a string as an argument and\n//    returns a string encrypted with the alphabet being rotated. \n//    The alphabet should be rotated in a manner such that the letters \n//    shift down by two multiplied to two places.\n//    For example:\n//    for 'hi' returns 'lm'\n//    for 'asdfghjkl' returns 'ewhjklnop'\n//    for 'gf' returns 'kj'\n//    for 'et' returns 'ix'\n//\n// @param x {string} Input string\n//\n// @return {string} rotated string\nencrypt:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "encrypt", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 90, "prompt": "// @overview \n// You are given a list of integers.\n//    Write a function next_smallest() that returns the 2nd smallest element of the list.\n//    Return None if there is no such element.\n//\n// @param x {int[]} Input list\n//\n// @return {int} seocnd smallest\nnext_smallest:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "next_smallest", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 91, "prompt": "// @overview \n// You'll be given a string of words, and your task is to count the number\n//    of boredoms. A boredom is a sentence that starts with the word \"I\".\n//    Sentences are delimited by '.', '?' or '!'.\n//\n// @param x {string} Input string\n//\n// @return {int} number of boredoms\nis_bored:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "is_bored", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 92, "prompt": "// @overview \n// Create a function that takes 3 numbers.\n//    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n//    Returns false in any other cases.\n//\n// @param x {numeric}  1st Input integer\n// @param y {numeric}  2nd Input integer\n// @param z {numeric}  3rd Input integer\n//\n// @return {boolean} number of boredoms\nany_int:{[x;y;z]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"", "q_tests": [], "entry_point": "any_int", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 93, "prompt": "// @overview \n// Write a function that takes a message, and encodes in such a \n//    way that it swaps case of all letters, replaces all vowels in \n//    the message with the letter that appears 2 places ahead of that \n//    vowel in the english alphabet. \n//    Assume only letters. \n//\n// @param x {string} Input string\n//\n// @return {string} Transformed string\nencode:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "encode", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 94, "prompt": "// @overview \n// You are given a list of integers.\n//    You need to find the largest prime value and return the sum of its digits.\n//\n// @param x {int[]} Input list of integers\n//\n// @return {int} sum of digits\nskjkasdkd:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"", "q_tests": [], "entry_point": "skjkasdkd", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 95, "prompt": "// @overview \n// Given a dictionary, return True if all keys are strings in lower \n//    case or all keys are strings in upper case, else return False.\n//\n// @param x {dict} Input dictionary\n//\n// @return {boolean} Are keys uniform\ncheck_dict_case:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))", "q_tests": [], "entry_point": "check_dict_case", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 96, "prompt": "// @overview \n// Implement a function that takes an non-negative integer and returns an array of the first n\n//    integers that are prime numbers and less than n.\n//\n// @param x {int} Upper bound\n//\n// @return {int[]} list of primes\ncount_up_to:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]", "q_tests": [], "entry_point": "count_up_to", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 97, "prompt": "// @overview \n// Complete the function that takes two integers and returns \n//    the product of their unit digits.\n//    Assume the input is always valid.\n//    Examples:\n//    for (148, 412) return 16.\n//    for (19, 28) return 72.\n//    for (2020, 1851) return 0.\n//    for (14,-15) return 20.\n//\n// @param x {int} 1st integer\n// @param y {int} 2nd integer\n//\n// @return {int} the product\nmultiply:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))", "q_tests": [], "entry_point": "multiply", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 98, "prompt": "// @overview \n// Given a string s, count the number of uppercase vowels in even indices.\n//\n// @param x {string} Input string\n//\n// @return {int} the count\ncount_upper:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "count_upper", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 99, "prompt": "// @overview \n// Create a function that takes a value (string) representing a number\n//    and returns the closest integer to it. If the number is equidistant\n//    from two integers, round it away from zero.\n//\n// @param x {string} Input string\n//\n// @return {int} the nearest integer\nclosest_integer:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"", "q_tests": [], "entry_point": "closest_integer", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 100, "prompt": "// @overview \n// Given a positive integer n, you have to make a pile of n levels of stones.\n//    The first level has n stones.\n//    The number of stones in the next level is:\n//        - the next odd number if n is odd.\n//        - the next even number if n is even.\n//    Return the number of stones in each level in a list, where element at index\n//    i represents the number of stones in the level (i+1).\n//\n//    Examples:\n//    for 3 return [3, 5, 7]\n//\n// @param x {int} number on first level\n//\n// @return {int[]} total levels in pile\nmake_a_pile:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "make_a_pile", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 101, "prompt": "// @overview \n// You will be given a string of words separated by commas or spaces. Your task is\n//    to split the string into words and return an array of the words.\n//    \n//    For example:\n//    for \"Hi, my name is John\" return [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n//    for \"One, two, three, four, five, six\" return [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n//\n// @param x {string} Input string\n//\n// @return {string[]} list of words\nwords_string:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]", "q_tests": [], "entry_point": "words_string", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 102, "prompt": "// @overview \n// This function takes two positive numbers x and y and returns the\n//    biggest even integer number that is in the range [x, y] inclusive. If \n//    there's no such number, then the function should return -1.\n//    \n//\n// @param x {int} first integer\n// @param y {int} second integer\n//\n// @return {int} upper integer\nchoose_num:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546", "q_tests": [], "entry_point": "choose_num", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 103, "prompt": "// @overview \n// You are given two positive integers n and m, and your task is to compute the\n//    average of the integers from n through m (including n and m). \n//    Round the answer to the nearest integer and convert that to binary.\n//    If n is greater than m, return -1.\n//    Example:\n//    for (1, 5) return \"0b11\"\n//    for (7, 5) return -1\n//    for (10, 20) return \"0b1111\"\n//    for (20, 33) return \"0b11010\"\n//\n// @param x {int} first integer\n// @param y {int} second integer\n//\n// @return {string} binary representation\nrounded_avg:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"", "q_tests": [], "entry_point": "rounded_avg", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 104, "prompt": "// @overview \n// Given a list of positive integers x. return a sorted list of all \n//    elements that hasn't any even digit.\n//\n// @param x {int[]} Input integers\n//\n// @return {int[]} sorted sub-list\nunique_digits:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "unique_digits", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 105, "prompt": "// @overview \n// Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n//    reverse the resulting array, and then replace each digit by its corresponding name from\n//    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n//\n//    For example:\n//      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n//            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n//            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n//      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n//    \n//      If the array is empty, return an empty array:\n//      arr = []\n//      return []\n//    \n//      If the array has any strange number ignore it:\n//      arr = [1, -1 , 55] \n//            -> sort arr -> [-1, 1, 55]\n//            -> reverse arr -> [55, 1, -1]\n//      return = ['One']\n//\n// @param x {int[]} Input integers\n//\n// @return {string[]} list of number words\nby_length:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]", "q_tests": [], "entry_point": "by_length", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 106, "prompt": "// @overview \n// Implement the function f that takes n as a parameter,\n//    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n//    or the sum of numbers from 1 to i otherwise.\n//    i starts from 1.\n//\n// @param x {int} lenght of list\n//\n// @return {int[]} list of numbers\nf:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]", "q_tests": [], "entry_point": "f", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 107, "prompt": "// @overview \n// Given a positive integer n, return a tuple that has the number of even and odd\n//    integer palindromes that fall within the range(1, n), inclusive.\n//\n//    Example 1:\n//\n//        Input: 3\n//        Output: (1, 2)\n//        Explanation:\n//        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n//\n//    Example 2:\n//\n//        Input: 12\n//        Output: (4, 6)\n//        Explanation:\n//        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n//\n// @param x {int} upper bound on integers\n//\n// @return {int[]} number of odd/even palindromes\neven_odd_palindrome:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "even_odd_palindrome", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 108, "prompt": "// @overview \n// Write a function count_nums which takes an array of integers and returns\n//    the number of elements which has a sum of digits > 0.\n//    If a number is negative, then its first signed digit will be negative:\n//    e.g. -123 has signed digits -1, 2, and 3.\n//\n// @param x {int} Input integer\n//\n// @return {int} count of numbers\ncount_nums:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "count_nums", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 109, "prompt": "// @overview \n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n//    numbers in the array will be randomly ordered. Your task is to determine if\n//    it is possible to get an array sorted in non-decreasing order by performing \n//    the following operation on the given array:\n//        You are allowed to perform right shift operation any number of times.\n//    \n//    One right shift operation means shifting all elements of the array by one\n//    position in the right direction. The last element of the array will be moved to\n//    the starting position in the array i.e. 0th index. \n//\n//    If it is possible to obtain the sorted array by performing the above operation\n//    then return True else return False.\n//\n// @param x {int[]} Input integer array\n//\n// @return {boolean} 1b if sortable 0b otherwise\nmove_one_ball:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True", "q_tests": [], "entry_point": "move_one_ball", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 110, "prompt": "// @overview \n// In this problem, you will implement a function that takes two lists of numbers,\n//    and determines whether it is possible to perform an exchange of elements\n//    between them to make lst1 a list of only even numbers.\n//    There is no limit on the number of exchanged elements between lst1 and lst2.\n//    If it is possible to exchange elements between the lst1 and lst2 to make\n//    all the elements of lst1 to be even, return \"YES\".\n//    Otherwise, return \"NO\".\n//\n// @param x {int[]} Input integer array 1\n// @param y {int[]} Input integer array 2\n//\n// @return {string} \"YES\" if swapable \"NO\" otherwise\nexchange:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"", "q_tests": [], "entry_point": "exchange", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 111, "prompt": "// @overview \n// Given a string representing a space separated lowercase letters, return a dictionary\n//    of the letter with the most repetition and containing the corresponding count.\n//    If several letters have the same occurrence, return all of them.\n//    \n//    Example:\n//    for 'a b c' return {'a': 1, 'b': 1, 'c': 1}\n//    for 'a b b a' return {'a': 2, 'b': 2}\n//\n// @param x {string} Input string\n//\n// @return {dict} \"YES\" if swapable \"NO\" otherwise\nhistogram:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"", "q_tests": [], "entry_point": "histogram", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 112, "prompt": "// @overview \n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n//    then check if the result string is palindrome.\n//    A string is called palindrome if it reads the same backward as forward.\n//    You should return a tuple containing the result string and True/False for the check.\n//    \n//\n// @param x {string} Input string\n// @param y {string} Chars to remove\n//\n// @return {boolean} 1b if palindrone 0b otherwise\nreverse_delete:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)", "q_tests": [], "entry_point": "reverse_delete", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 113, "prompt": "// @overview \n//  Given a list of strings, where each string consists of only digits, return a list.\n//    Each element i of the output should be \"the number of odd elements in the\n//    string i of the input.\" where all the i's should be replaced by the number\n//    of odd digits in the i'th string of the input.\n//\n//    for ['1234567'] return [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n//    for ['3',\"11111111\"] return [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]   \n//\n// @param x {string[]} Input strings\n//\n// @return {string[]} Mutated strings\nodd_count:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "odd_count", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 114, "prompt": "// @overview \n//  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n//   of nums.\n//\n// @param x {int[]} Input integers\n//\n// @return {int} Minimal sum\nminSubArraySum:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1", "q_tests": [], "entry_point": "minSubArraySum", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 115, "prompt": "// @overview \n//  You are given a rectangular grid of wells. Each row represents a single well,\n//    and each 1 in a row represents a single unit of water.\n//    Each well has a corresponding bucket that can be used to extract water from it, \n//    and all buckets have the same capacity.\n//    Your task is to use the buckets to empty the wells.\n//    Output the number of times you need to lower the buckets.\n//\n//    Example 1:\n//        Input: \n//            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n//            bucket_capacity : 1\n//        Output: 6\n//\n//    Example 2:\n//        Input: \n//            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n//            bucket_capacity : 2\n//        Output: 5\n//    \n//    Example 3:\n//        Input: \n//            grid : [[0,0,0], [0,0,0]]\n//            bucket_capacity : 5\n//        Output: 0\n//\n//    Constraints:\n//        * all wells have the same length\n//        * 1 <= grid.length <= 10^2\n//        * 1 <= grid[:,1].length <= 10^2\n//        * grid[i][j] -> 0 | 1\n//        * 1 <= capacity <= 10\n//\n// @param x {int[]} Input grid\n// @param y {int} Capacity\n//\n// @return {int} Number of buckets\nmax_fill:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"", "q_tests": [], "entry_point": "max_fill", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 116, "prompt": "// @overview \n//  In this Kata, you have to sort an array of non-negative integers according to\n//    number of ones in their binary representation in ascending order.\n//    For similar number of ones, sort based on decimal value.\n//\n// @param x {int[]} Input array\n//\n// @return {int[]} Sorted array\nsort_array:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "sort_array", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 117, "prompt": "// @overview \n//  Given a string s and a natural number n, you have been tasked to implement \n//    a function that returns a list of all words from string s that contain exactly \n//    n consonants, in order these words appear in the string s.\n//    If the string s is empty then the function should return an empty list.\n//    Note: you may assume the input string contains only letters and spaces.\n//    Examples:\n//    for (\"Mary had a little lamb\", 4) return [\"little\"]\n//    for (\"Mary had a little lamb\", 3) return [\"Mary\", \"lamb\"]\n//    for (\"simple white space\", 2) return []\n//    for (\"Hello world\", 4) return [\"world\"]\n//    for (\"Uncle sam\", 3) return [\"Uncle\"]\n//\n// @param x {string} Input string\n// @param y {int} Number of characters\n//\n// @return {string[]}\nselect_words:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))", "q_tests": [], "entry_point": "select_words", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 118, "prompt": "// @overview \n//  You are given a word. Your task is to find the closest vowel that stands between \n//    two consonants from the right side of the word (case sensitive).\n//    \n//    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n//    find any vowel met the above condition. \n//\n//    You may assume that the given string contains English letter only.\n//\n//    Example:\n//    for \"yogurt\" return \"u\"\n//    for \"FULL\" return \"U\"\n//    for \"quick\" return \"\"\n//    for \"ab\" return \"\"\n//\n// @param x {string} Input string\n//\n// @return {string} Vowel\nget_closest_vowel:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "get_closest_vowel", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 119, "prompt": "// @overview \n//  You are given a list of two strings, both strings consist of open\n//    parentheses '(' or close parentheses ')' only.\n//    Your job is to check if it is possible to concatenate the two strings in\n//    some order, that the resulting string will be good.\n//    A string S is considered to be good if and only if all parentheses in S\n//    are balanced. For example: the string '(())()' is good, while the string\n//    '())' is not.\n//    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n//\n// @param x {string} 1st parentheses string\n// @param y {string} 2nd parentheses string\n//\n// @return {string} \"Yes\" or \"No\" if matching\nmatch_parens:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes'", "q_tests": [], "entry_point": "match_parens", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 120, "prompt": "// @overview \n//  Given an array arr of integers and a positive integer k, return a sorted list \n//    of length k with the maximum k numbers in arr.\n//\n// @param x {int[]} List of integers\n// @param y {int} number to return\n//\n// @return {int[]} truncated sorted list\nmaximum:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []", "q_tests": [], "entry_point": "maximum", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 121, "prompt": "// @overview \n//  Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n//\n// @param x {int[]} List of integers\n//\n// @return {int} the sum\nsolution:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.", "q_tests": [], "entry_point": "solution", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 122, "prompt": "// @overview \n//  Given a non-empty array of integers arr and an integer k, return\n//    the sum of the elements with at most two digits from the first k elements of arr.\n//\n// @param x {int[]} List of integers\n// @param x {int} Number of elements to consider\n//\n// @return {int} the sum\nadd_elements:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "add_elements", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 123, "prompt": "// @overview \n//  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n//\n//    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n//    as follows: start with any positive integer n. Then each term is obtained from the \n//    previous term as follows: if the previous term is even, the next term is one half of \n//    the previous term. If the previous term is odd, the next term is 3 times the previous\n//    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n//\n//    Note: \n//        1. Collatz(1) is [1].\n//        2. returned list sorted in increasing order.\n//\n// @param x {int} Input integer\n//\n// @return {int[]} The integer list\nget_odd_collatz:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "get_odd_collatz", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 124, "prompt": "// @overview \n//  You have to write a function which validates a given date string and\n//    returns True if the date is valid otherwise False.\n//    The date is valid if all of the following rules are satisfied:\n//    1. The date string is not empty.\n//    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n//    3. The months should not be less than 1 or higher than 12.\n//    4. The date should be in the format: mm-dd-yyyy\n//\n//\n// @param x {string} date string\n//\n// @return {boolean} 1b is valid 0b otherwise\nvalid_date:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False", "q_tests": [], "entry_point": "valid_date", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 125, "prompt": "// @overview \n//  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n//    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n//\n// @param x {string} input string\n//\n// @return {int} number of words\nsplit_words:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0", "q_tests": [], "entry_point": "split_words", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 126, "prompt": "// @overview \n//  Given a list of numbers, return whether or not they are sorted\n//    in ascending order. If list has more than 1 duplicate of the same\n//    number, return False. Assume no negative numbers and only integers.\n//\n// @param x {int[]} input integers\n//\n// @return {boolean} is sorted condition true\nis_sorted:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"", "q_tests": [], "entry_point": "is_sorted", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 127, "prompt": "// @overview \n//  You are given two intervals,\n//    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n//    The given intervals are closed which means that the interval (start, end)\n//    includes both start and end.\n//    For each given interval, it is assumed that its start is less or equal its end.\n//    Your task is to determine whether the length of intersection of these two \n//    intervals is a prime number.\n//    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n//    which its length is 1, which not a prime number.\n//    If the length of the intersection is a prime number, return \"YES\",\n//    otherwise, return \"NO\".\n//    If the two intervals don't intersect, return \"NO\".\n//\n// @param x {int[]} interval one\n// @param y {int[]} interval two\n//\n// @return {string} is intersection prime \"YES\" or \"NO\"\nintersection:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"", "q_tests": [], "entry_point": "intersection", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 128, "prompt": "// @overview \n//  You are given an array arr of integers and you need to return\n//    sum of magnitudes of integers multiplied by product of all signs\n//    of each number in the array, represented by 1, -1 or 0.\n//    Note: return None for empty arr.\n//\n//    Example:\n//    for [1, 2, 2, -4] return -9\n//    for [0, 1] return 0\n//\n// @param x {int[]} integer list\n//\n// @return {int} signed sum\nprod_signs:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "prod_signs", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 129, "prompt": "// @overview \n//  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n//    each cell of the grid contains a value. Every integer in the range [1, N * N]\n//    inclusive appears exactly once on the cells of the grid.\n//\n//    You have to find the minimum path of length k in the grid. You can start\n//    from any cell, and in each step you can move to any of the neighbor cells,\n//    in other words, you can go to cells which share an edge with you current\n//    cell.\n//    Please note that a path of length k means visiting exactly k cells (not\n//    necessarily distinct).\n//    You CANNOT go off the grid.\n//    A path A (of length k) is considered less than a path B (of length k) if\n//    after making the ordered lists of the values on the cells that A and B go\n//    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n//    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n//    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n//    lst_A[j] = lst_B[j].\n//    It is guaranteed that the answer is unique.\n//    Return an ordered list of the values on the cells that the minimum path go through.\n//\n//    Examples:\n//\n//        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n//        Output: [1, 2, 1]\n//\n//        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n//        Output: [1]\n//\n// @param x {list} list of integer lists matrix grid\n// @param y {int} path length\n//\n// @return {int[]} values the path goes through\nminPath:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]", "q_tests": [], "entry_point": "minPath", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 130, "prompt": "// @overview \n//  Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n//    the last couple centuries. However, what people don't know is Tribonacci sequence.\n//    Tribonacci sequence is defined by the recurrence:\n//    tri(1) = 3\n//    tri(n) = 1 + n / 2, if n is even.\n//    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n//    For example:\n//    tri(2) = 1 + (2 / 2) = 2\n//    tri(4) = 3\n//    tri(3) = tri(2) + tri(1) + tri(4)\n//          = 2 + 3 + 3 = 8 \n//    You are given a non-negative integer number n, you have to a return a list of the \n//    first n + 1 numbers of the Tribonacci sequence.\n//\n// @param x {int} sequence number\n//\n// @return {int[]} sequence values\ntri:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]", "q_tests": [], "entry_point": "tri", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 131, "prompt": "// @overview \n//  Given a positive integer n, return the product of the odd digits.\n//    Return 0 if all digits are even.\n//    For example:\n//    for 1 return 1\n//    for 4 return 0\n//    for 235 return 15\n//\n// @param x {int} Input integer\n//\n// @return {int} product of odd digits \ndigits:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0", "q_tests": [], "entry_point": "digits", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 132, "prompt": "// @overview \n//  Create a function that takes a string as input which contains only square brackets.\n//    The function should return True if and only if there is a valid subsequence of brackets \n//    where at least one bracket in the subsequence is nested.\n//\n//    for '[[]]' return True\n//    for '[]]]]]]][[[[[]' return False\n//    for '[][]' return False\n//    for '[]' return False\n//    for '[[][]]' return True\n//    for '[[]][[' return True\n//\n// @param x {string} Sequence of square brackets\n//\n// @return {boolean} does nesting occur  \nis_nested:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False", "q_tests": [], "entry_point": "is_nested", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 133, "prompt": "// @overview \n//  You are given a list of numbers.\n//    You need to return the sum of squared numbers in the given list,\n//    round each element in the list to the upper int(Ceiling) first.\n//    Examples:\n//    For lst = [1,2,3] the output should be 14\n//    For lst = [1,4,9] the output should be 98\n//    For lst = [1,3,5,7] the output should be 84\n//    For lst = [1.4,4.2,0] the output should be 29\n//    For lst = [-2.4,1,1] the output should be 6\n//\n// @param x {float[]} collection of floats\n//\n// @return {int} rounded squared sum\nsum_squares:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "sum_squares", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 134, "prompt": "// @overview \n//  Create a function that returns True if the last character\n//    of a given string is an alphabetical character and is not\n//    a part of a word, and False otherwise.\n//    Note: \"word\" is a group of characters separated by space.\n//\n//    Examples:\n//    for \"apple pie\" return False\n//    for \"apple pi e\" return True\n//    for \"apple pi e \" return False\n//    for \"\" return False \n//\n// @param x {string} String of words\n//\n// @return {boolean} Does the string end in string correct\ncheck_if_last_char_is_a_letter:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "check_if_last_char_is_a_letter", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 135, "prompt": "// @overview \n//  Create a function which returns the largest index of an element which\n//    is not greater than or equal to the element immediately preceding it. If\n//    no such element exists then return -1. The given array will not contain\n//    duplicate values.\n//\n// @param x {int[]} List of integers\n//\n// @return {int} the index\ncan_arrange:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1", "q_tests": [], "entry_point": "can_arrange", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 136, "prompt": "// @overview \n//  Create a function that returns a tuple (a, b), where 'a' is\n//    the largest of negative integers, and 'b' is the smallest\n//    of positive integers in a list.\n//    If there is no negative or positive integers, return them as None.\n//\n// @param x {int[]} List of integers\n//\n// @return {int[]} The duple of largest and smallest\nlargest_smallest_integers:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "largest_smallest_integers", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 137, "prompt": "// @overview \n//  Create a function that takes integers, floats, or strings representing\n//    real numbers, and returns the larger variable in its given variable type.\n//    Return None if the values are equal.\n//    Note: If a real number is represented as a string, the floating point might be . or ,\n//    for (1, 2.5) return 2.5\n//    for (1, \"2,3\") return \"2,3\"\n//    for (\"5,1\", \"6\") return \"6\"\n//    for (\"1\", 1) return None\n// @param x {list} Pair of integers\n//\n// @return {any} The larger integer\ncompare_one:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "compare_one", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 138, "prompt": "// @overview \n//  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n//\n// @param x {int} Can n be written as sum of 4 integers\n//\n// @return {boolean} true if can be\nis_equal_to_sum_even:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True", "q_tests": [], "entry_point": "is_equal_to_sum_even", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 139, "prompt": "// @overview \n//  The Brazilian factorial is defined as:\n//    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n//    where n > 0\n//\n//    For example:\n//    for 4 return 288\n//\n//    The function will receive an integer as input and should return the special\n//    factorial of this integer.\n//\n// @param x {int} sequence id\n//\n// @return {int} value\nspecial_factorial:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"", "q_tests": [], "entry_point": "special_factorial", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 140, "prompt": "// @overview \n// Given a string text, replace all spaces in it with underscores, \n//    and if a string has more than 2 consecutive spaces, \n//    then replace all consecutive spaces with - \n//    \n//    for \"Example\" return \"Example\"\n//    for \"Example 1\" return \"Example_1\"\n//    for \" Example 2\" return \"_Example_2\"\n//    for \" Example   3\" return \"_Example-3\"\n//\n// @param x {string} Input string\n//\n// @return {string} modified string\nfix_spaces:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"", "q_tests": [], "entry_point": "fix_spaces", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 141, "prompt": "// @overview \n// Create a function which takes a string representing a file's name, and returns\n//    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n//    A file's name is considered to be valid if and only if all the following conditions \n//    are met:\n//    - There should not be more than three digits ('0'-'9') in the file's name.\n//    - The file's name contains exactly one dot '.'\n//    - The substring before the dot should not be empty, and it starts with a letter from \n//    the latin alphapet ('a'-'z' and 'A'-'Z').\n//    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n//    Examples:\n//    for \"example.txt\" return 'Yes'\n//    for \"1example.dll\" return 'No' (the name should start with a latin alphapet letter)\n//\n// @param x {string} Input string\n//\n// @return {string} Yes or No if file name is valid\nfile_name_check:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'", "q_tests": [], "entry_point": "file_name_check", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 142, "prompt": "// @overview \n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n//    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n//    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n//    \n//    Examples:\n//    For lst = [1,2,3] the output should be 6\n//    For lst = []  the output should be 0\n//    For lst = [-1,-5,2,-1,-5]  the output should be -126\n//\n// @param x {int[]} Input integers\n//\n// @return {int} Output sum\nsum_squares:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:", "q_tests": [], "entry_point": "sum_squares", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 143, "prompt": "// @overview \n// You are given a string representing a sentence,\n//    the sentence contains some words separated by a space,\n//    and you have to return a string that contains the words from the original sentence,\n//    whose lengths are prime numbers,\n//    the order of the words in the new string should be the same as the original one.\n//\n// @param x {string} String of words\n//\n// @return {string} String of prime words\nwords_in_sentence:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"", "q_tests": [], "entry_point": "words_in_sentence", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 144, "prompt": "// @overview \n//  Your task is to implement a function that will simplify the expression\n//    x * n. The function returns True if x * n evaluates to a whole number and False\n//    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n//    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n//\n//    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n//\n//    for (\"1/5\", \"5/1\") return True\n//    for (\"1/6\", \"2/1\") return False\n//    for (\"7/10\", \"10/2\") return False\n//\n// @param x {string} First fraction\n// @param y {string} Second fraction\n//\n// @return {booleam} Is a whole number\nsimplify:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'", "q_tests": [], "entry_point": "simplify", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 145, "prompt": "// @overview \n//  Write a function which sorts the given list of integers\n//    in ascending order according to the sum of their digits.\n//    Note: if there are several items with similar sum of their digits,\n//    order them based on their index in original list.\n//\n//    For example:\n//    for [1, 11, -1, -11, -12] return [-1, -11, 1, -12, 11]\n//    for [] return []\n//\n// @param x {int[]} List of numbers\n//\n// @return {int[]} Sorted list\norder_by_points:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "order_by_points", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 146, "prompt": "// @overview \n//  Write a function that takes an array of numbers as input and returns \n//    the number of elements in the array that are greater than 10 and both \n//    first and last digits of a number are odd (1, 3, 5, 7, 9)\n//\n// @param x {int[]} List of numbers\n//\n// @return {int} Number of elements\nspecialFilter:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0", "q_tests": [], "entry_point": "specialFilter", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 147, "prompt": "// @overview \n//  You are given a positive integer n. You have to create an integer array a of length n.\n//        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n//        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n//        and a[i] + a[j] + a[k] is a multiple of 3.\n//\n//    Example :\n//        Input: n = 5\n//        Output: 1\n//        Explanation: \n//        a = [1, 3, 7, 13, 21]\n//        The only valid triple is (1, 7, 13).\n//\n// @param x {int} Positive integer\n//\n// @return {int} Number tripes\nget_max_triples:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361", "q_tests": [], "entry_point": "get_max_triples", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 148, "prompt": "// @overview \n//  There are eight planets in our solar system: the closerst to the Sun \n//    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n//    Uranus, Neptune.\n//    Write a function that takes two planet names as strings planet1 and planet2. \n//    The function should return a tuple containing all planets whose orbits are \n//    located between the orbit of planet1 and the orbit of planet2, sorted by \n//    the proximity to the sun. \n//    The function should return an empty tuple if planet1 or planet2\n//    are not correct planet names. \n//    Examples\n//    for (\"Jupiter\", \"Neptune\") return (\"Saturn\", \"Uranus\")\n//    for (\"Earth\", \"Mercury\") return (\"Venus\")\n//    for (\"Mercury\", \"Uranus\") return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n//\n// @param x {string} Planet 1\n// @param y {string} planet 2\n//\n// @return {string[]} Inbetween planets\nbf:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()", "q_tests": [], "entry_point": "bf", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 149, "prompt": "// @overview \n//  Write a function that accepts a list of strings as a parameter,\n//    deletes the strings that have odd lengths from it,\n//    and returns the resulted list with a sorted order,\n//    The list is always a list of strings and never an array of numbers,\n//    and it may contain duplicates.\n//    The order of the list should be ascending by length of each word, and you\n//    should return the list sorted by that rule.\n//    If two words have the same length, sort the list alphabetically.\n//    The function should return a list of strings in sorted order.\n//    You may assume that all words will have the same length.\n//    For example:\n//    for [\"aa\", \"a\", \"aaa\"] return [\"aa\"]\n//    for [\"ab\", \"a\", \"aaa\", \"cd\"] return [\"ab\", \"cd\"]\n//\n// @param x {string[]} List of strings\n//\n// @return {string[]} Sorted Strings\nsorted_list_sum:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]", "q_tests": [], "entry_point": "sorted_list_sum", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 150, "prompt": "// @overview \n// A simple program which should return the value of y if n is \n//    a prime number and should return the value of z otherwise\n//\n// @param x {int} number to be tested as prime\n// @param y {int} 1st number if prime\n// @param z {int} 2nd number if not prime\n//\n// @return {string[]} Sorted Strings\nx_or_y:{[x;y;z]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2", "q_tests": [], "entry_point": "x_or_y", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 151, "prompt": "// @overview \n//  Given a list of numbers, return the sum of squares of the numbers\n//    in the list that are odd. Ignore numbers that are negative or not integers.\n//\n// @param x {int[]} Input integers\n//\n// @return {int} sum of squares\ndouble_the_difference:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"", "q_tests": [], "entry_point": "double_the_difference", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 152, "prompt": "// @overview \n//  I think we all remember that feeling when the result of some long-awaited\n//    event is finally known. The feelings and thoughts you have at that moment are\n//    definitely worth noting down and comparing.\n//    Your task is to determine if a person correctly guessed the results of a number of matches.\n//    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n//    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n//    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n//\n// @param x {int[]} Input integers 1\n// @param y {int[]} Input integers 2\n//\n// @return {int[]} \ncompare:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "compare", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 153, "prompt": "// @overview \n//  You will be given the name of a class (a string) and a list of extensions//.\n//    The extensions are to be used to load additional classes to the class. //The\n//    strength of the extension is as follows: Let CAP be the number of the u//ppercase\n//    letters in the extension's name, and let SM be the number of lowercase //letters \n//    in the extension's name, the strength is given by the fraction CAP - SM//. \n//    You should find the strongest extension and return a string in thi//s \n//    format: ClassName.StrongestExtensionNam//e.\n//    If there are two or more extensions wit//h the same strength, you should\n//    choose the one that comes first in the //list.\n//    For example, if you are given \"Slices\" //as the class and a list of the\n//    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//    (its strength is -1).\n//    Example:\n//    for ('my_class', ['AA', 'Be', 'CC']) return 'my_class.AA'\n//\n// @param x {string} string\n// @param y {string[]} List of strings\n//\n// @return {string} the strongest extension \nStrongest_Extension:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'", "q_tests": [], "entry_point": "Strongest_Extension", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 154, "prompt": "// @overview \n//  You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n//\n// @param x {string} Input string\n// @param y {string} substring to check\n//\n// @return {boolean} Is cyclic substring \ncycpattern_check:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"", "q_tests": [], "entry_point": "cycpattern_check", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 155, "prompt": "// @overview \n// Given an integer. return a tuple that has the number of even and odd digits respectively\n//\n// @param x {int} Input integer\n//\n// @return {int[]} duple for counts\neven_odd_count:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "even_odd_count", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 156, "prompt": "// @overview \n// Given a positive integer, obtain its roman numeral equivalent as a string,\n//    and return it in lowercase.\n//    Restrictions: 1 <= num <= 1000\n//\n//    Examples:\n//    for 19 return 'xix'\n//    for 152 return 'clii'\n//    for 426 return 'cdxxvi'\n//\n// @param x {int} Input integer\n//\n// @return {string} roman numeral\nint_to_mini_roman:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "int_to_mini_roman", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 157, "prompt": "// @overview \n// Given the lengths of the three sides of a triangle. Return True if the three\n//    sides form a right-angled triangle, False otherwise.\n//\n// @param x {int} Side length 1\n// @param y {int} Side length 2\n// @param z {int} Side length 3\n//\n// @return {boolean} Is right angle triangle?\nright_angle_triangle:{[x;y;z]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False", "q_tests": [], "entry_point": "right_angle_triangle", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 158, "prompt": "// @overview \n// Write a function that accepts a list of strings.\n//    The list contains different words. Return the word with maximum number\n//    of unique characters. If multiple strings have maximum number of unique\n//    characters, return the one which comes first in lexicographical order.\n//\n//    for [\"name\", \"of\", \"string\"] return \"string\"\n//    for [\"name\", \"enam\", \"game\"] return \"enam\"\n//    for [\"aaaaaaa\", \"bb\" ,\"cc\"] return \"aaaaaaa\"\n//\n// @param x {string[]} List of words\n//\n// @return {string} biggest word\nfind_max:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'", "q_tests": [], "entry_point": "find_max", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 159, "prompt": "// @overview \n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n//    but now you need to eat more carrots to complete the day's meals.\n//    you should return an array of [ total number of eaten carrots after your meals,\n//                                    the number of carrots left after your meals ]\n//    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n//    \n//    Example:\n//    * for (5, 6, 10) return [11, 4]\n//    * for (4, 8, 9) return [12, 1]\n//    * for (1, 10, 10) return [11, 0]\n//    * for (2, 11, 5) return [7, 0]\n//\n// @param x {int} the number of carrots that you have eaten.\n// @param y {int} the number of carrots that you need to eat.\n// @param z {int} the number of remaining carrots thet exist in stock.\n//\n// @return {int[]} total number of eaten carrots after your meals, the number of carrots left after your meals\neat:{[x;y;z]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"", "q_tests": [], "entry_point": "eat", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 160, "prompt": "// @overview \n// Given two lists operator, and operand. The first list has basic algebra operations, and \n//    the second list is a list of integers. Use the two given lists to build the algebric \n//    expression and return the evaluation of this expression.\n//\n//    The basic algebra operations:\n//    Addition ( + ) \n//    Subtraction ( - ) \n//    Multiplication ( * ) \n//    Floor division ( // ) \n//    Exponentiation ( ** ) \n//\n//    Example:\n//    operator['+', '*', '-']\n//    array = [2, 3, 4, 5]\n//    result = 2 + 3 * 4 - 5\n//    => result = 9\n//\n//    Note:\n//        The length of operator list is equal to the length of operand list minus one.\n//        Operand is a list of of non-negative integers.\n//        Operator list has at least one operator, and operand list has at least two operands.\n//\n// @param x {string[]} operands.\n// @param y {int[]} objects to be opperated on.\n//\n// @return {int} result\ndo_algebra:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "do_algebra", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 161, "prompt": "// @overview \n// You are given a string s.\n//    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//    otherwise keep it as it is.\n//    If the string contains no letters, reverse the string.\n//    The function should return the resulted string.\n//    Examples\n//    for \"1234\" return \"4321\"\n//    for \"ab\" return \"AB\"\n//    for \"#a@C\" return \"#A@c\"\n//\n// @param x {string} Input string.\n//\n// @return {string} result\nsolve:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "q_tests": [], "entry_point": "solve", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 162, "prompt": "// @overview \n// You are given a string s.\n//    Given a string 'text', return its md5 hash equivalent string.\n//    If 'text' is an empty string, return None.\n//\n// @param x {string} Input string.\n//\n// @return {string} hash value\nstring_to_md5:{[x]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True", "q_tests": [], "entry_point": "string_to_md5", "test_setup_code": "", "canonical_solution": ""}
{"task_id": 163, "prompt": "// @overview \n// Given two positive integers a and b, return the even digits between a\n//    and b, in ascending order.\n//\n//    For example:\n//    for (2, 8) return [2, 4, 6, 8]\n//    for (8, 2) return [2, 4, 6, 8]\n//    for (10, 14) => []\n//\n// @param x {int} Integer 1\n// @param y {int} Integer 2\n//\n// @return {int[]} list of even numbers\ngenerate_integers:{[x;y]\n    / function body\n    }", "tests": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "q_tests": [], "entry_point": "generate_integers", "test_setup_code": "", "canonical_solution": ""}
